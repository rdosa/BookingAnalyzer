import streamlit as st
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import pandas as pd
import os
from data_processor import BookingAnalyzer

def get_tshirt_size(value):
    """T-Shirt m√©ret meghat√°roz√°sa TCV √©rt√©k alapj√°n"""
    try:
        value = float(value) if value != '' else 0
        if value <= 2_000_000:
            return "XS"
        elif value <= 10_000_000:
            return "S"
        elif value <= 25_000_000:
            return "M"
        elif value <= 100_000_000:
            return "L"
        else:
            return "XL"
    except (ValueError, TypeError):
        return "XS"

def check_csv_files():
    """Ellen≈ërzi, hogy l√©teznek-e a sz√ºks√©ges CSV f√°jlok"""
    acv_exists = os.path.exists('ACV.csv')
    tcv_exists = os.path.exists('TCV.csv')
    return acv_exists, tcv_exists

def main():
    st.set_page_config(page_title="Booking Value Analyzer", layout="wide")
    st.title("üìä ACV/TCV Booking Value Elemz≈ë")
    st.markdown("12+12 h√≥napos g√∂rd√ºl≈ë elemz√©s architekt√∫r√°nk√©nt")
    
    # F√°jlok ellen≈ërz√©se
    acv_exists, tcv_exists = check_csv_files()
    
    if not acv_exists or not tcv_exists:
        st.error("‚ùå Hi√°nyz√≥ CSV f√°jlok!")
        
        col1, col2 = st.columns(2)
        
        with col1:
            if not acv_exists:
                st.error("üîç **ACV.csv** nem tal√°lhat√≥ a projekt mapp√°ban")
            else:
                st.success("‚úÖ **ACV.csv** megtal√°lva")
                
        with col2:
            if not tcv_exists:
                st.error("üîç **TCV.csv** nem tal√°lhat√≥ a projekt mapp√°ban")
            else:
                st.success("‚úÖ **TCV.csv** megtal√°lva")
        
        st.markdown("---")
        st.subheader("üîÑ Alternat√≠v: Manu√°lis felt√∂lt√©s")
        
        # Fallback: manu√°lis felt√∂lt√©s
        col1, col2 = st.columns(2)
        with col1:
            acv_file = st.file_uploader("ACV CSV f√°jl felt√∂lt√©se", type=['csv'])
        with col2:
            tcv_file = st.file_uploader("TCV CSV f√°jl felt√∂lt√©se", type=['csv'])
            
        if acv_file and tcv_file:
            try:
                st.success("üìÅ F√°jlok felt√∂ltve, inicializ√°l√°s...")
                analyzer = BookingAnalyzer(acv_file_obj=acv_file, tcv_file_obj=tcv_file)
                run_analysis(analyzer)
            except Exception as e:
                st.error(f"Hiba a felt√∂lt√∂tt f√°jlokkal: {str(e)}")
    else:
        # Automatikus bet√∂lt√©s
        try:
            st.success("‚úÖ CSV f√°jlok automatikusan bet√∂ltve!")
            st.info("üìÇ Bet√∂lt√∂tt f√°jlok: ACV.csv, TCV.csv")
            
            analyzer = BookingAnalyzer(acv_file_path='ACV.csv', tcv_file_path='TCV.csv')
            run_analysis(analyzer)
            
        except Exception as e:
            st.error(f"Hiba t√∂rt√©nt az automatikus bet√∂lt√©skor: {str(e)}")
            st.markdown("---")
            st.subheader("üîÑ Alternat√≠v: Manu√°lis felt√∂lt√©s")
            
            # Fallback manu√°lis felt√∂lt√©s
            col1, col2 = st.columns(2)
            with col1:
                acv_file = st.file_uploader("ACV CSV f√°jl felt√∂lt√©se", type=['csv'])
            with col2:
                tcv_file = st.file_uploader("TCV CSV f√°jl felt√∂lt√©se", type=['csv'])
                
            if acv_file and tcv_file:
                analyzer = BookingAnalyzer(acv_file_obj=acv_file, tcv_file_obj=tcv_file)
                run_analysis(analyzer)

def run_analysis(analyzer):
    """Elemz√©s futtat√°sa a megadott analyzer-rel"""
    # Felhaszn√°l√≥i vez√©rl≈ëk
    st.sidebar.header("‚öôÔ∏è Be√°ll√≠t√°sok")
    
    # H√≥nap v√°laszt√°sa
    available_months = analyzer.get_available_months()
    selected_month = st.sidebar.selectbox(
        "V√°lassza ki a v√©gpont h√≥napot:",
        available_months,
        help="Az elemz√©s ezen h√≥napt√≥l visszamen≈ëleg 12 h√≥napot fog vizsg√°lni"
    )
    
    # Architekt√∫ra sz≈±r≈ë - T√ñBBSZ√ñR√ñS V√ÅLASZT√ÅS
    available_architectures = analyzer.get_architectures()
    selected_architectures = st.sidebar.multiselect(
        "Architekt√∫r√°k kiv√°laszt√°sa:",
        options=available_architectures,
        default=[],
        help="Hagyja √ºresen az √∂sszes architekt√∫ra megjelen√≠t√©s√©hez, vagy v√°lasszon ki egy vagy t√∂bb architekt√∫r√°t."
    )
    
    # Ha semmi sincs kiv√°lasztva, akkor az √∂sszes architekt√∫r√°t mutatjuk
    if not selected_architectures:
        st.sidebar.info("üí° √ñsszes architekt√∫ra megjelen√≠tve")
        arch_filter = None
    else:
        st.sidebar.success(f"‚úÖ {len(selected_architectures)} architekt√∫ra kiv√°lasztva")
        arch_filter = selected_architectures
    
    # Elemz√©s futtat√°sa
    results = analyzer.get_rolling_analysis(selected_month, arch_filter)
    
    # Eredm√©nyek megjelen√≠t√©se
    display_results(st, results)

def display_results(st, results):
    """Eredm√©nyek megjelen√≠t√©se"""
    try:
        period_info = results.get('period_info', {})
        
        # Kiv√°lasztott architekt√∫r√°k megjelen√≠t√©se
        selected_arch = period_info.get('selected_architectures', '√ñsszes')
        if isinstance(selected_arch, list):
            st.info(f"üéØ Kiv√°lasztott architekt√∫r√°k: {', '.join(selected_arch)}")
        else:
            st.info(f"üéØ Megjelen√≠tett architekt√∫r√°k: {selected_arch}")
        
        # Id≈ëszak inform√°ci√≥k
        st.subheader("üìÖ Elemz√©si id≈ëszakok")
        col1, col2 = st.columns(2)
        
        with col1:
            st.metric("Aktu√°lis id≈ëszak",
                     f"{period_info.get('current_start', '')} - {period_info.get('current_end', '')}")
        
        with col2:
            st.metric("Referencia id≈ëszak",
                     f"{period_info.get('reference_start', '')} - {period_info.get('reference_end', '')}")
        
        # ACV elemz√©s
        st.subheader("üí∞ ACV Analysis")
        acv_current = results.get('acv_current', {})
        acv_reference = results.get('acv_reference', {})
        
        if acv_current and acv_reference:
            display_comparison_table(st, acv_current, acv_reference, "ACV", "$")
        
        # TCV elemz√©s
        st.subheader("üìä TCV Analysis")
        tcv_current = results.get('tcv_current', {})
        tcv_reference = results.get('tcv_reference', {})
        
        if tcv_current and tcv_reference:
            display_comparison_table(st, tcv_current, tcv_reference, "TCV", "$")
            
    except Exception as e:
        st.error(f"Eredm√©ny megjelen√≠t√©si hiba: {e}")

def display_comparison_table(st, current_data, reference_data, metric_name, currency):
    """√ñsszehasonl√≠t√≥ t√°bl√°zat megjelen√≠t√©se - SZ√çNES T-SHIRT SIZING-gel"""
    try:
        architectures = set(current_data.keys()).union(set(reference_data.keys()))
        table_data = []
        
        for arch in sorted(architectures):
            current_val = current_data.get(arch, 0)
            reference_val = reference_data.get(arch, 0)
            
            # BIZTONS√ÅGOS numerikus konverzi√≥
            try:
                current_val = float(current_val) if current_val != '' else 0
                reference_val = float(reference_val) if reference_val != '' else 0
            except (ValueError, TypeError):
                current_val = 0
                reference_val = 0
            
            # V√°ltoz√°s sz√°m√≠t√°s
            if reference_val != 0:
                change = ((current_val - reference_val) / reference_val) * 100
                change_str = f"{change:+.1f}%"
            else:
                change_str = "N/A"
            
            # Abszol√∫t v√°ltoz√°s
            abs_change = current_val - reference_val
            
            # T√°bl√°zat sor √∂ssze√°ll√≠t√°sa
            row_data = {
                'Architecture': arch,
                f'Aktu√°lis {metric_name}': f"{currency}{current_val:,.0f}",
                f'Referencia {metric_name}': f"{currency}{reference_val:,.0f}",
                'V√°ltoz√°s %': change_str,
                'Abszol√∫t v√°ltoz√°s': f"{currency}{abs_change:+,.0f}"
            }
            
            # T-SHIRT SIZING CSAK TCV-N√âL
            if metric_name == "TCV":
                tshirt_size = get_tshirt_size(current_val)
                
                # Sz√≠nk√≥dok a m√©retekhez
                size_colors = {
                    'XS': 'üî¥',
                    'S': 'üü†', 
                    'M': 'üü°',
                    'L': 'üü¢',
                    'XL': 'üîµ'
                }
                colored_size = f"{size_colors.get(tshirt_size, '')} {tshirt_size}"
                
                # T-shirt size az elej√©re
                row_data = {
                    'Size': colored_size,
                    **row_data  # √∂sszes t√∂bbi oszlop
                }
            
            table_data.append(row_data)
        
        df_display = pd.DataFrame(table_data)
        
        # T-SHIRT SIZING LEGEND MEGJELEN√çT√âSE TCV-N√âL
        if metric_name == "TCV":
            st.markdown("""
**üìè T-Shirt Sizing Legend:**  
üî¥ **XS**: ‚â§ 2M | üü† **S**: 2M - 10M | üü° **M**: 10M - 25M | üü¢ **L**: 25M - 100M | üîµ **XL**: > 100M [USD values]
""")
        
        st.dataframe(df_display, use_container_width=True)
        
    except Exception as e:
        st.error(f"T√°bl√°zat megjelen√≠t√©si hiba: {e}")

if __name__ == "__main__":
    main()
